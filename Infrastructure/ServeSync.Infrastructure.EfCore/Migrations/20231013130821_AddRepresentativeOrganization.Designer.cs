// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServeSync.Infrastructure.EfCore;

#nullable disable

namespace ServeSync.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231013130821_AddRepresentativeOrganization")]
    partial class AddRepresentativeOrganization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RepresentativeOrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("RepresentativeOrganizationId")
                        .IsUnique();

                    b.ToTable("Event");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.EventAttendanceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAttendanceInfo");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.EventRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsNeedApprove")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRole");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInEvent");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationRepInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganizationInEventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganizationRepId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationInEventId");

                    b.HasIndex("OrganizationRepId");

                    b.ToTable("OrganizationRepInEvent");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<double>("MaxScore")
                        .HasColumnType("double");

                    b.Property<double>("MinScore")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("EventActivity");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventCollaborationRequestAggregate.Entities.EventCollaborationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("EventCollaborationRequest");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EventOrganization");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganizationContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EventOrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IdentityId")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventOrganizationId");

                    b.ToTable("EventOrganizationContact");
                });

            modelBuilder.Entity("ServeSync.Domain.StudentManagement.EducationProgramAggregate.Entities.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredActivityScore")
                        .HasColumnType("int");

                    b.Property<int>("RequiredCredit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EducationProgram");
                });

            modelBuilder.Entity("ServeSync.Domain.StudentManagement.FacultyAggregate.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("ServeSync.Domain.StudentManagement.HomeRoomAggregate.Entities.HomeRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("HomeRoom");
                });

            modelBuilder.Entity("ServeSync.Domain.StudentManagement.StudentAggregate.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("HomeRoomId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HomeTown")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityId")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("HomeRoomId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.PermissionAggregate.Entities.ApplicationPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApplicationPermission");
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessTokenId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccessTokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationInEvent", "RepresentativeOrganization")
                        .WithOne()
                        .HasForeignKey("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", "RepresentativeOrganizationId");

                    b.OwnsOne("ServeSync.Domain.EventManagement.SharedKernel.ValueObjects.EventAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("FullAddress")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("EventId");

                            b1.ToTable("Event");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("RepresentativeOrganization");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.EventAttendanceInfo", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", "Event")
                        .WithMany("AttendanceInfos")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.EventRole", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationInEvent", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", "Event")
                        .WithMany("Organizations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationRepInEvent", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationInEvent", "OrganizationInEvent")
                        .WithMany("Representatives")
                        .HasForeignKey("OrganizationInEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganizationContact", "OrganizationRep")
                        .WithMany()
                        .HasForeignKey("OrganizationRepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationInEvent");

                    b.Navigation("OrganizationRep");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventActivity", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventCategory", "EventCategory")
                        .WithMany("Activities")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventCollaborationRequestAggregate.Entities.EventCollaborationRequest", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ServeSync.Domain.EventManagement.SharedKernel.ValueObjects.EventAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("EventCollaborationRequestId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("FullAddress")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("EventCollaborationRequestId");

                            b1.ToTable("EventCollaborationRequest");

                            b1.WithOwner()
                                .HasForeignKey("EventCollaborationRequestId");
                        });

                    b.OwnsOne("ServeSync.Domain.EventManagement.EventCollaborationRequestAggregate.ValueObjects.EventOrganizationContactInfo", "OrganizationContact", b1 =>
                        {
                            b1.Property<Guid>("EventCollaborationRequestId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Address")
                                .HasColumnType("longtext");

                            b1.Property<DateTime?>("Birth")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<bool?>("Gender")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Position")
                                .HasColumnType("longtext");

                            b1.HasKey("EventCollaborationRequestId");

                            b1.ToTable("EventCollaborationRequest");

                            b1.WithOwner()
                                .HasForeignKey("EventCollaborationRequestId");
                        });

                    b.OwnsOne("ServeSync.Domain.EventManagement.EventCollaborationRequestAggregate.ValueObjects.EventOrganizationInfo", "Organization", b1 =>
                        {
                            b1.Property<Guid>("EventCollaborationRequestId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Address")
                                .HasColumnType("longtext");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("EventCollaborationRequestId");

                            b1.ToTable("EventCollaborationRequest");

                            b1.WithOwner()
                                .HasForeignKey("EventCollaborationRequestId");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Organization")
                        .IsRequired();

                    b.Navigation("OrganizationContact")
                        .IsRequired();
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganizationContact", b =>
                {
                    b.HasOne("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganization", "EventOrganization")
                        .WithMany("Contacts")
                        .HasForeignKey("EventOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOrganization");
                });

            modelBuilder.Entity("ServeSync.Domain.StudentManagement.HomeRoomAggregate.Entities.HomeRoom", b =>
                {
                    b.HasOne("ServeSync.Domain.StudentManagement.FacultyAggregate.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ServeSync.Domain.StudentManagement.StudentAggregate.Entities.Student", b =>
                {
                    b.HasOne("ServeSync.Domain.StudentManagement.EducationProgramAggregate.Entities.EducationProgram", "EducationProgram")
                        .WithMany()
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServeSync.Domain.StudentManagement.HomeRoomAggregate.Entities.HomeRoom", "HomeRoom")
                        .WithMany()
                        .HasForeignKey("HomeRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");

                    b.Navigation("HomeRoom");
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.RolePermission", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.PermissionAggregate.Entities.ApplicationPermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.ApplicationRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.RefreshToken", b =>
                {
                    b.HasOne("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", "User")
                        .WithMany("RefreshToken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.Event", b =>
                {
                    b.Navigation("AttendanceInfos");

                    b.Navigation("Organizations");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventAggregate.Entities.OrganizationInEvent", b =>
                {
                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventCategoryAggregate.Entities.EventCategory", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ServeSync.Domain.EventManagement.EventOrganizationAggregate.Entities.EventOrganization", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.RoleAggregate.Entities.ApplicationRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ServeSync.Infrastructure.Identity.Models.UserAggregate.Entities.ApplicationUser", b =>
                {
                    b.Navigation("RefreshToken");
                });
#pragma warning restore 612, 618
        }
    }
}
